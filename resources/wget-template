#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.0
# Generated by {{hostName}} - {{date}}
#
###############################################################################

version=1.0
CACHE_FILE=.$(basename $0).status
openId={{userOpenId}}

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg.
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_CERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 12))   #One hour (in seconds)

# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

usage() {
    echo "Usage: $(basename $0) [flags]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
}
#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pdvqo:w:i' OPT; do
    case $OPT in
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        p) clean_work=0;;               #       : preserve data that failed checksum
        o) openId="$OPTARG";;           #<openid>   : Set the open id
        w) output="$OPTARG";;           #<file> : Write output for DML in the given file
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

if [[ "$output" ]]; then
    #check and prepare the DML file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    : > "$output" || { echo "Can't write file $output"; break; }
fi

##############################################################################
# get certificates from rainbow
get_certificates() {
    # don't if this was already done today
    [[ "$(find $ESG_CERT_DIR -type d -mtime -1)" ]] && return 0
    echo "Retrieving Federation Certificates..." >&2
    
    #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
    wget https://rainbow.llnl.gov/dist/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME\
        || wget https://rainbow.llnl.gov/dist/certs/esg_trusted_certificates.tar || { echo "Could't update certs" >&2; return 1; }

    #if here everythng went fine. Replace old cert with this ones    
    [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR
    mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
    
}

# Retrieve ESG credentials
get_credentials() {
    [[ ! -f $MYPROXY_CERT ]] && echo "TODO: Download myproxylogon for console"

    #if the user already defined one don't bother    
    if ! grep -q OpenID $HOME/.MyProxyLogon 2>/dev/null; then
        #no OpenID, we need to ask the user
        echo -n "Please give your OpenID [https://example/exampluser]? "
        read -e openId
    fi

    local args=
    [[ "$openId" ]] && args=$args" --oid $openId"
    #get password
    local pass
    read -sp "MyProxy Password? " pass
    echo $'\nRetrieving Credentials...' >&2
    if ! java -jar $MYPROXY_CERT $args -P $pass --output $ESG_CREDENTIALS ; then
        echo "Certificate could not be retrieved"
        exit 1
    fi
    unset pass
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {
    #get all certificates
    get_certificates

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum

    case $chk_type in
        md5) local_chksum=$(md5sum $file | cut -f1 -d" ");;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value"
    diff -q <(echo $local_chksum) <(echo $chk_value) >/dev/null
}

download() {
    wget="wget${insecure:+ --no-check-certificate} -c $PKI_WGET_OPTS"
    ((quiet)) && wget="$wget -q" || { ((!verbose)) && wget="$wget -nv"; }
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #are we just writing a file?
        if [ "$output" ]; then
            echo "$file - $url" >> $output
            echo ""
            continue
        fi

        while : ; do
                #if we have the file, check if it's already processed.
                [ -f $file ] && cached="$(grep $file $CACHE_FILE)" || unset cached

                #check it wasn't modified
                if [[ -n "$cached" && "$(stat -c %Y $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    echo "Already downloaded and verified"
                    break
                fi

                # (if we had the file size, we could check before trying to complete)
                echo "Downloading"
                $wget -O "$file" $url || { failed=1; break; }

                #check if file is there
                if [[ -f $file ]]; then
                        ((debug)) && echo file found
                        if ! check_chksum "$file" $chksum_type $chksum; then
                                echo "  $chksum_type failed!"
                                if ((clean_work)); then
                                        rm $file
                                        #try again
                                        echo -n "  re-downloading..."
                                        continue
                                else
                                        echo "  don't use -p or remove manually."
                                fi
                        else
                                echo "  $chksum_type ok. done!"
                                echo $file $(stat -c %Y $file) $chksum >> $CACHE_FILE
                        fi
                fi
                #done!
                break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #check_cert
            unset failed
        fi
        
    done <<EOF--dataset.file.url.chksum_type.chksum
{{files}}
EOF--dataset.file.url.chksum_type.chksum

}


#
# MAIN
#
echo "Running $(basename $0) version: $version"
echo "Use $(basename $0) -h for help."

find_credentials
#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE

download

#remove duplicates (if any)
{ rm $CACHE_FILE && tac | awk '!x[$1]++' | tac > $CACHE_FILE; } < $CACHE_FILE
